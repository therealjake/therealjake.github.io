{"version":3,"file":"static/js/599.5af7fa54.chunk.js","mappings":"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","sources":["../node_modules/@3d-dice/dice-box/src/components/world.none.js"],"sourcesContent":["import Dice from './Dice'\nclass WorldNone {\n\tconfig\n\t#canvas\n\tinitialized = false\n\t#dieCache = {}\n\t#count = 0\n\t#sleeperCount = 0\n\t#dieRollTimer = []\n\t#rollCompleteTimer\n\tnoop = () => {}\n\tconstructor(options){\n\t\tthis.onInitComplete = options.onInitComplete || this.noop\n\t\tthis.onThemeLoaded = options.onThemeLoaded || this.noop\n\t\tthis.onRollResult = options.onRollResult || this.noop\n\t\tthis.onRollComplete = options.onRollComplete || this.noop\n\t\tthis.onDieRemoved = options.onDieRemoved || this.noop\n\t\tthis.initialized = this.initScene(options)\n\t}\n\n\tasync initScene(config) {\n\t\t// set the config from World\n\t\tthis.config = config.options\n\n\t\t// init complete - let the world know\n\t\tthis.onInitComplete()\n\t}\n\n\tresize(){\n\t\t\n\t}\n\n\tloadTheme(){\n\t\treturn Promise.resolve()\n\t}\n\n\tupdateConfig(options){\n\t\tObject.assign(this.config, options)\n\t}\n\n\taddNonDie(die){\n\t\tconsole.log('die', die)\n\t\tclearTimeout(this.#rollCompleteTimer)\n\t\tconst {id, value, ...rest} = die\n\t\tconst newDie = {\n\t\t\tid,\n\t\t\tvalue,\n\t\t\tconfig: rest\n\t\t}\n\t\tthis.#dieCache[id] = newDie\n\t\t\n\t\tthis.#dieRollTimer.push(setTimeout(() => {\n\t\t\tthis.handleAsleep(newDie)\n\t\t}, this.#count++ * this.config.delay))\n\n\t\t// since we don't have a render loop, we'll set an internal timer\n\t\tthis.#rollCompleteTimer = setTimeout(() => {\n\t\t\tthis.onRollComplete()\n\t\t}, 500)\n\t}\n\n\tadd(die){\n\t\tconsole.log(\"add die\")\n\t\tthis.addNonDie(die)\n\t}\n\n\tremove(data){\n\t\tconsole.log(\"remove die\")\n\t\t// TODO: test this with exploding dice\n\t\tconst dieData = this.#dieCache[data.id]\n\t\t\n\t\t// check if this is d100 and remove associated d10 first\n\t\tif(dieData.hasOwnProperty('d10Instance')){\n\t\t\t// delete entry\n\t\t\tdelete this.#dieCache[dieData.d10Instance.id]\n\t\t\t// decrement count\n\t\t\tthis.#sleeperCount--\n\t\t}\n\n\t\t// delete entry\n\t\tdelete this.#dieCache[data.id]\n\t\t// decrement count\n\t\tthis.#sleeperCount--\n\n\t\tthis.onDieRemoved(data.rollId)\n\t}\n\n\tclear(){\n\t\tif(!Object.keys(this.#dieCache).length && !this.#sleeperCount) {\n\t\t\treturn\n\t\t}\n\n\t\tthis.#dieRollTimer.forEach(timer=>clearTimeout(timer))\n\n\t\t// remove all dice\n\t\tObject.values(this.#dieCache).forEach(die => {\n\t\t\tif(die.mesh)\n\t\t\t\tdie.mesh.dispose()\n\t\t})\n\t\t\n\t\t// reset storage\n\t\tthis.#dieCache = {}\n\t\tthis.#count = 0\n\t\tthis.#sleeperCount = 0\n\t}\n\n\t// handle the position updates from the physics worker. It's a simple flat array of numbers for quick and easy transfer\n\tasync handleAsleep(die){\n\t\t// mark this die as asleep\n\t\tdie.asleep = true\n\t\n\t\t// get the roll result for this die\n\t\tawait Dice.getRollResult(die)\n\t\n\t\tif(die.d10Instance || die.dieParent) {\n\t\t\t// if one of the pair is asleep and the other isn't then it falls through without getting the roll result\n\t\t\t// otherwise both dice in the d100 are asleep and ready to calc their roll result\n\t\t\tif(die?.d10Instance?.asleep || die?.dieParent?.asleep) {\n\t\t\t\tconst d100 = die.config.sides === 100 ? die : die.dieParent\n\t\t\t\tconst d10 = die.config.sides === 10 ? die : die.d10Instance\n\t\t\t\tif (d10.value === 0 && d100.value === 0) {\n\t\t\t\t\td100.value = 100; // 00 + 0 is 100 on a d100\n\t\t\t\t} else {\n\t\t\t\t\td100.value = d100.value + d10.value\n\t\t\t\t}\n\t\n\t\t\t\tthis.onRollResult({\n\t\t\t\t\trollId: d100.config.rollId,\n\t\t\t\t\tvalue : d100.value\n\t\t\t\t})\n\t\t\t}\n\t\t} else {\n\t\t\t// turn 0's on a d10 into a 10\n\t\t\tif(die.config.sides === 10 && die.value === 0) {\n\t\t\t\tdie.value = 10\n\t\t\t}\n\t\t\tthis.onRollResult({\n\t\t\t\trollId: die.config.rollId,\n\t\t\t\tvalue: die.value\n\t\t\t})\n\t\t}\n\t\t// add to the sleeper count\n\t\tthis.#sleeperCount++\n\t}\n}\n\nexport default WorldNone"],"names":["P","constructor","e","p","h","v","i","d","a","m","f","this","onInitComplete","noop","onThemeLoaded","onRollResult","onRollComplete","onDieRemoved","initialized","initScene","config","options","resize","loadTheme","Promise","resolve","updateConfig","Object","assign","addNonDie","console","log","clearTimeout","s","id","o","value","n","l","r","push","setTimeout","handleAsleep","u","_","delay","c","add","remove","hasOwnProperty","d10Instance","rollId","clear","keys","length","forEach","values","mesh","dispose","asleep","C","getRollResult","dieParent","sides","WeakMap"],"sourceRoot":""}